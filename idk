import customtkinter as ctk
from twelvedata import TDClient
import time, threading, platform, playsound, json

os = platform.system()

apikey = "11f5ab7e343a4b059c3d9b647c564ba8"
new_stock_label = None
root = ctk.CTk()
stocks_dict = {}
if os == "Linux":
    root.iconbitmap("@immagini/growth.xbm")
else:
    root.iconbitmap("immagini/growth.ico")

root.geometry("600x150")
root.title("Monitor Azioni V1.0")



def prezzo_raggiunto():
    global stock_price,popup
    
    popup = ctk.CTkInputDialog(text=f"Lo stock ha superato i {stock_price} USD",title="!AVVISO!")

    playsound.playsound("suoni/lello2.mp3")

def open_saves():
    global value,stocks_dict,new_stock_label
    try:
        with open("versione3/save.json", "r") as file:
            datas = json.load(file)
            stocks_dict = datas
            for key, value in datas.items():
                stocks_dict[key] = value
                td = TDClient(apikey)
                ts = td.time_series(
                    symbol=key,
                    interval="1min",
                    outputsize=1,
            
                )

                df = ts.as_pandas()
                stock_price =  df["close"].iloc[0] #PRENDE L'ULTIMO PREZZO DELLO STOCK.
                new_stock_label = ctk.CTkLabel(root, text=f"STOCK: {key}; PREZZO ATTUALE: {stock_price}; PREZZO DA RAGGIUNGERE: {value}")
                new_stock_label.grid()
        file.close()
    except Exception as e:
    
        pass
def remove_stock():
    global stocks_dict,new_stock_label
    key,value = stocks_dict.popitem()
    
    new_stock_label.destroy()

    root.update()
def save_stocks():
    global stocks_dict
    with open("versione3/save.json","w") as file:
       json.dump(stocks_dict,file, indent=4)
    file.close()


def new_stock():

    global stock_ticker_entry_text, prezzo_limitevar,stock_price, stocks_dict, new_stock_label

    stock_ticker_entry_text_get = stock_ticker_entry_text.get()

    prezzo_limitevar_get = prezzo_limitevar.get()

    td = TDClient(apikey)
    
    while True:
        try:
            
            td = TDClient(apikey)
            ts = td.time_series(
                symbol=stock_ticker_entry_text_get,
                interval="1min",
                outputsize=1,
        
            )

            df = ts.as_pandas()
            stock_price =  df["close"].iloc[0] #PRENDE L'ULTIMO PREZZO DELLO STOCK.

            attualpricelabelvar.set(f"Prezzo attuale: {stock_price} USD")
            stocks_dict[stock_ticker_entry_text_get] = prezzo_limitevar_get #AGGIUNGE AL DIZIONARIO IL TICKER E IL PREZZO MASSIMO

            #CREA NUOVA LABEL CON NUOVO TICKER E PREZZO MASSIMO.
            new_stock_label = ctk.CTkLabel(root, text=f"STOCK: {stock_ticker_entry_text_get}; PREZZO ATTUALE: {stock_price}; PREZZO DA RAGGIUNGERE: {prezzo_limitevar_get}")
            new_stock_label.grid()


            if stock_price > float(prezzo_limitevar_get): 
                prezzo_raggiunto()
                break
            time.sleep(500)
        except Exception as e:
            print(e)
            attualpricelabelvar.set(e)
            print(td.api_usage())
            break






    


def price_thread():
    threading.Thread(target=new_stock,daemon=True).start()

prezzo_limitevar = ctk.StringVar()
stock_ticker_entry_text = ctk.StringVar()
attualpricelabelvar = ctk.StringVar()

################################################################

label = ctk.CTkLabel(root,text="inserisci il ticker dell'azienda")
label.grid(row=0,column=0)
label2 = ctk.CTkLabel(root,text="inserisci il prezzo dell'avviso")
label2.grid(row=0,column=2)

########################################################################Ã 
stock_ticker_entry = ctk.CTkEntry(root,font=("Helvetica",20),width=200,textvariable=stock_ticker_entry_text)
stock_ticker_entry.grid(row=1,column=0)

prezzo_limite = ctk.CTkEntry(root,font=("Helvetica",20),width=200,textvariable=prezzo_limitevar)
prezzo_limite.grid(row=1, column=2)

add_button = ctk.CTkButton(root, text= "+", font=("Arial",16),command=price_thread)
add_button.grid(row=2,column=1)

remove_button = ctk.CTkButton(root, text= "Del", font=("Arial",16),command=remove_stock)
remove_button.grid(row=2,column = 2)
#########################################################################################


    
open_saves()
root.mainloop()


save_stocks()#SALVA IL DIZIONARIO CON TICKER COME CHIAVI E IL PREZZO MAX COME VALORI!

print("programma finito")
